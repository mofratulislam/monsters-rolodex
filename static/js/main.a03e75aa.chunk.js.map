{"version":3,"sources":["components/card-list/card-list.component.jsx","components/header/header.component.jsx","components/search-box/search-box.component.jsx","redux/monsters/monstersSlice.js","redux/searchField/searchFieldSlice.js","App.js","redux/store.js","reportWebVitals.js","index.js"],"names":["CardList","monsters","LazyCard","React","lazy","className","fallback","map","monster","id","Header","memo","SearchBox","placeholder","handleChange","aria-label","type","onChange","fetchMonsters","createAsyncThunk","a","fetch","response","data","json","monstersSlice","createSlice","name","initialState","monstersProfiles","isLoading","error","reducers","extraReducers","fulfilled","state","action","payload","rejected","searchFieldSlice","searchField","changeSearchField","actions","App","useState","filteredMonsters","setFilteredMonsters","useSelector","dispatch","useDispatch","useEffect","monstersData","filter","toLowerCase","includes","e","target","value","configureStore","reducer","monstersReducer","searchFieldReducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"kRAgBeA,G,YAbE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACVC,EAAWC,IAAMC,MAAK,kBAAM,gCAClC,OACI,qBAAKC,UAAU,YAAf,SACI,cAAC,WAAD,CAAUC,SAAU,6CAApB,SACKL,EAASM,KAAI,SAACC,GAAD,OACV,cAACN,EAAD,CAA2BM,QAASA,GAArBA,EAAQC,aCPrCC,EAAS,kBAAM,mDAENP,MAAMQ,KAAKD,GCWXE,G,MAZG,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACd,8BACI,uBACIC,aAAW,kBACXV,UAAU,SACVW,KAAK,SACLH,YAAaA,EACbI,SAAUH,Q,8CCRTI,EAAgBC,YAAiB,sBAAD,sBAAwB,8BAAAC,EAAA,sEAC1CC,MAAM,8CADoC,cAC3DC,EAD2D,OAE3DC,EAAOD,EAASE,OAF2C,kBAG1DD,GAH0D,4CA2CtDE,EArCOC,YAAY,CAC9BC,KAAM,WACNC,aAAc,CACVC,iBAAkB,GAClBC,WAAW,EACXC,MAAO,MAEXC,SAAU,GACVC,eAAa,mBACRf,EAAcgB,WAAY,SAACC,GAAD,mBAAC,eACrBA,GADoB,IAEvBL,WAAW,OAHN,cAKRZ,EAAcgB,WAAY,SAACC,EAAOC,GAAR,mBAAC,eACrBD,GADoB,IAEvBL,WAAW,EACXD,iBAAkBO,EAAOC,aARpB,cAURnB,EAAcoB,UAAW,SAACH,EAAOC,GAAR,mBAAC,eACpBD,GADmB,IAEtBL,WAAW,EACXC,MAAOK,EAAOL,WAbT,KA6BjB,QC3CMQ,EAAmBb,YAAY,CACjCC,KAAM,cACNC,aAAc,CACVY,YAAa,IAEjBR,SAAU,CACNS,kBAAmB,SAACN,EAAOC,GAAR,mBAAC,eACbD,GADY,IAEfK,YAAaJ,EAAOC,cAKjBI,EAAsBF,EAAiBG,QAAvCD,kBAEAF,IAAf,QC0BeI,EAlCH,WAAO,IAAD,EACkCC,mBAAS,IAD3C,mBACPC,EADO,KACWC,EADX,KAGR7C,EAAW8C,aAAY,SAACZ,GAAD,OAAWA,EAAMlC,SAAS4B,oBAEjDW,EAAcO,aAAY,SAACZ,GAAD,OAAWA,EAAMK,YAAYA,eAEvDQ,EAAWC,cAEjBC,qBAAU,WACNF,EAAS9B,OACV,CAAC8B,IAcJ,OARAE,qBAAU,WACN,IAAMC,EAAelD,EAASmD,QAAO,SAAC5C,GAAD,OACjCA,EAAQmB,KAAK0B,cAAcC,SAASd,EAAYa,kBAGpDP,EAAoBK,KACrB,CAAClD,EAAUuC,IAGV,sBAAKnC,UAAU,MAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,CAAWQ,YAAY,kBAAkBC,aAf5B,SAACyC,GAClBP,EAASP,EAAkBc,EAAEC,OAAOC,WAehC,cAAC,EAAD,CAAUxD,SAA0B,KAAhBuC,EAAqBvC,EAAW4C,QClCjDa,G,MAAAA,YAAe,CAC1BC,QAAS,CACL1D,SAAU2D,EACVpB,YAAaqB,MCKNC,EAZS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCpBQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACI,cAAC,EAAD,QAGRC,SAASC,eAAe,SAM5Bd,M","file":"static/js/main.a03e75aa.chunk.js","sourcesContent":["import React, { Suspense } from 'react';\r\nimport './card-list.styles.css';\r\n\r\nconst CardList = ({ monsters }) => {\r\n    const LazyCard = React.lazy(() => import('../card/card.components'));\r\n    return (\r\n        <div className=\"card-list\">\r\n            <Suspense fallback={<div>Loading...</div>}>\r\n                {monsters.map((monster) => (\r\n                    <LazyCard key={monster.id} monster={monster} />\r\n                ))}\r\n            </Suspense>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst Header = () => <h1>Monsters Rolodex</h1>;\r\n\r\nexport default React.memo(Header);\r\n","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nconst SearchBox = ({ placeholder, handleChange }) => (\r\n    <div>\r\n        <input\r\n            aria-label=\"Search Monsters\"\r\n            className=\"search\"\r\n            type=\"search\"\r\n            placeholder={placeholder}\r\n            onChange={handleChange}\r\n        />\r\n    </div>\r\n);\r\n\r\nexport default SearchBox;\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const fetchMonsters = createAsyncThunk('users/fetchMonsters', async () => {\r\n    const response = await fetch('https://jsonplaceholder.typicode.com/users');\r\n    const data = response.json();\r\n    return data;\r\n});\r\n\r\nconst monstersSlice = createSlice({\r\n    name: 'monsters',\r\n    initialState: {\r\n        monstersProfiles: [],\r\n        isLoading: false,\r\n        error: null,\r\n    },\r\n    reducers: {},\r\n    extraReducers: {\r\n        [fetchMonsters.fulfilled]: (state) => ({\r\n            ...state,\r\n            isLoading: true,\r\n        }),\r\n        [fetchMonsters.fulfilled]: (state, action) => ({\r\n            ...state,\r\n            isLoading: false,\r\n            monstersProfiles: action.payload,\r\n        }),\r\n        [fetchMonsters.rejected]: (state, action) => ({\r\n            ...state,\r\n            isLoading: false,\r\n            error: action.error,\r\n        }),\r\n    },\r\n});\r\n\r\n// export const { monstersLoading, monstersReceived } = monstersSlice.actions;\r\n\r\n// export const fetchMonsters = () => (dispatch) => {\r\n//     dispatch(monstersLoading(true));\r\n//     fetch('https://jsonplaceholder.typicode.com/users')\r\n//         .then((res) => res.json())\r\n//         .then((data) => dispatch(monstersReceived(data)));\r\n// };\r\n\r\n// Action creators are generated for each case reducer function\r\n\r\nexport default monstersSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst searchFieldSlice = createSlice({\r\n    name: 'searchField',\r\n    initialState: {\r\n        searchField: '',\r\n    },\r\n    reducers: {\r\n        changeSearchField: (state, action) => ({\r\n            ...state,\r\n            searchField: action.payload,\r\n        }),\r\n    },\r\n});\r\n\r\nexport const { changeSearchField } = searchFieldSlice.actions;\r\n\r\nexport default searchFieldSlice.reducer;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport './App.css';\r\nimport CardList from './components/card-list/card-list.component';\r\nimport Header from './components/header/header.component';\r\nimport SearchBox from './components/search-box/search-box.component';\r\nimport { fetchMonsters } from './redux/monsters/monstersSlice';\r\nimport { changeSearchField } from './redux/searchField/searchFieldSlice';\r\n\r\nconst App = () => {\r\n    const [filteredMonsters, setFilteredMonsters] = useState([]);\r\n\r\n    const monsters = useSelector((state) => state.monsters.monstersProfiles);\r\n\r\n    const searchField = useSelector((state) => state.searchField.searchField);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchMonsters());\r\n    }, [dispatch]);\r\n\r\n    const handleChange = (e) => {\r\n        dispatch(changeSearchField(e.target.value));\r\n    };\r\n\r\n    useEffect(() => {\r\n        const monstersData = monsters.filter((monster) =>\r\n            monster.name.toLowerCase().includes(searchField.toLowerCase())\r\n        );\r\n\r\n        setFilteredMonsters(monstersData);\r\n    }, [monsters, searchField]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header />\r\n            <SearchBox placeholder=\"Search Monsters\" handleChange={handleChange} />\r\n            <CardList monsters={searchField === '' ? monsters : filteredMonsters} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport monstersReducer from './monsters/monstersSlice';\r\nimport searchFieldReducer from './searchField/searchFieldSlice';\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        monsters: monstersReducer,\r\n        searchField: searchFieldReducer,\r\n    },\r\n});\r\n","const reportWebVitals = (onPerfEntry) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport './index.css';\r\nimport store from './redux/store';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals())\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}